mutate(across(everything(),
~ case_when(!is.na(.) ~ str_c('[\"', .,'\"]'), TRUE ~ NA_character_)))%>% rename(representation=value)
comma_sep %>% select(-outline,-certificate,-representation)%>% cbind(outline_rmv_dup,certificate_rmv_dup,representation_rmv_dup)
comma_sep <- comma_sep %>% select(-outline,-certificate,-representation)%>% cbind(outline_rmv_dup,certificate_rmv_dup,representation_rmv_dup)
comma_sep %>% write.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/suyu_Gallery_FORJSON.csv")
#problem : now the same images have different tags, so there will be dubplicates when displaying to the gallery.
# example : ( PlantVillage has interaction styles of pop-up messages, instrction ) So there will be one image for instrction, and one for pop-up messages, when displaying to the gallery.
#Solution : all items with the same image links (which is the ID here) are seperated by common, instead of seperating them into difft rows.
library(tidyverse)
library(jsonlite)
library(janitor)
df <- read.csv("C:/Users/sjsa3/Documents/GitHub/Gallery_filterJS/examples/data/movie.csv")
df
comma_sep <- 		   df %>% group_by(year) %>%
summarise(
id             = paste(id),
outline        = paste(outline, collapse=","),
genre          = paste(genre, collapse=", "),
certificate    = paste(certificate, collapse=", "),
representation = paste(representation, collapse=", "),
pkg_name       = paste(pkg_name),
rating         = paste(rating),
runtime        = paste(runtime),
date           = paste(date),
director = paste(director),
actor          = paste(actor),
stars          = paste(stars),
name = paste(name)
) %>% distinct(year,.keep_all = TRUE)
comma_sep
library(data.table)
outline_rmv_dup <- setDT(comma_sep)[, list(outline= toString(unique(strsplit(outline,
',\\s*')[[1]]))), by = year] %>% select(outline)%>% as.data.frame()
genre_rmv_dup <- setDT(comma_sep)[, list(genre= toString(unique(strsplit(genre,
',\\s*')[[1]]))), by = year] %>% select(genre)%>% as_tibble()
certificate_rmv_dup <- setDT(comma_sep)[, list(certificate= toString(unique(strsplit(certificate,
',\\s*')[[1]]))), by = year] %>% select(certificate)%>% as_tibble()
representation_rmv_dup <- setDT(comma_sep)[, list(representation= toString(unique(strsplit(representation,
',\\s*')[[1]]))), by = year] %>% select(representation)%>% as_tibble()
# add quotation
#add " in the first & end of every text
outline_rmv_dup <- gsub(",", "\",\"", outline_rmv_dup$outline) %>% as_data_frame()
outline_rmv_dup<- outline_rmv_dup %>%
mutate(across(everything(),
~ case_when(!is.na(.) ~ str_c('[\"', .,'\"]'), TRUE ~ NA_character_)))%>% rename(outline=value)
genre_rmv_dup <- gsub(",", "\",\"", genre_rmv_dup$genre) %>% as_data_frame()
genre_rmv_dup<- genre_rmv_dup %>%
mutate(across(everything(),
~ case_when(!is.na(.) ~ str_c('[\"', .,'\"]'), TRUE ~ NA_character_)))%>% rename(genre=value)
certificate_rmv_dup <- gsub(",", "\",\"", certificate_rmv_dup$certificate) %>% as_data_frame()
certificate_rmv_dup<- certificate_rmv_dup %>%
mutate(across(everything(),
~ case_when(!is.na(.) ~ str_c('[\"', .,'\"]'), TRUE ~ NA_character_)))%>% rename(certificate=value)
representation_rmv_dup <- gsub(",", "\",\"", representation_rmv_dup$representation) %>% as_data_frame()
representation_rmv_dup<- representation_rmv_dup %>%
mutate(across(everything(),
~ case_when(!is.na(.) ~ str_c('[\"', .,'\"]'), TRUE ~ NA_character_)))%>% rename(representation=value)
comma_sep <- comma_sep %>% select(-outline,-genre,-certificate,-representation)%>% cbind(outline_rmv_dup,genre_rmv_dup,certificate_rmv_dup,representation_rmv_dup)
comma_sep
comma_sep %>% write.csv("C:/Users/sjsa3/Documents/GitHub/Gallery_filterJS/examples/data/movie_commaSep.csv")
Sys.setlocale(category = "LC_ALL", locale = "chs") #setlocale in order to use Chinese
library(tidyverse)
library(janitor)
library(DT)
library(gtsummary)
library(plotly)
library(kableExtra)
df <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel.csv",header = TRUE,as.is = TRUE, encoding = "UTF-8")
ap_cat <- df %>% distinct(package_name,app_categories) %>%
tabyl (app_categories)%>%
arrange(desc(n)) %>%
adorn_totals("row") %>%
adorn_pct_formatting()%>% as_tibble()
ap_cat
#check number of unique package
df %>% distinct(package_name,app_categories) %>%
tabyl (package_name,app_categories)%>%
adorn_totals(where = "col") %>% select(,c(1,22))%>%  datatable()
# for treemap
library(treemapify)
library(viridis)
ggplot(ap_cat [1:15,],
aes(area = n, fill = app_categories,
label=paste(app_categories,"\n",percent,"\n",n))) +  geom_treemap()+
geom_treemap_text(colour = "White",
place = "centre",
size = 19)+
theme(legend.position = "none")+
scale_fill_viridis(discrete = T)
# ggsave("Tree_categories.png")
df
df %>% left_join(model_app, by="package_name")%>% select(package_name,Lib, `Second.lib`,Other) %>% datatable()
df_final <- df_final %>% filter(model_functionalities !="Image Segmentation")
Sys.setlocale(category = "LC_ALL", locale = "chs") #setlocale in order to use Chinese
library(tidyverse)
library(janitor)
library(DT)
library(gtsummary)
library(plotly)
library(kableExtra)
# df <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel_Raw.csv",header = TRUE,as.is = TRUE, encoding = "UTF-8")%>% rename(model_functionalities=X.U.FEFF.model_functionalities)
df <- readxl::read_excel("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel.xlsx")
df %>% filter(model_functionalities == "Image labelling" &
!grepl('Y', ShouldBe_Cancelled)) %>%
distinct(package_name) %>% datatable()
df %>% filter(!grepl('Y', ShouldBe_Cancelled)) %>%
distinct(package_name, model_functionalities)%>%
datatable()
df %>% filter(model_functionalities == "Audio Classification")%>%
distinct(package_name)
df <-  df %>% filter(model_functionalities != "Recommendation")
library(janitor)
package_should_NOT_removed <- c("com.aresmob.scantranslator", "com.junruy.cgfyj", "com.aresmob.transmaster","com.familyfit.google.baduanjin", "com.joytunes.simplypiano","com.nhn.android.search")
# note :
# "com.familyfit.google.baduanjin" has two type of auditory feedback; the static one for sound theme; dynamic one for pose correction
# "com.joytunes.simplypiano" has two type of auditory feedback; the static one for sound theme; dynamic one for sound correction
df %>% filter(!grepl('Y', ShouldBe_Cancelled)) %>%
select(model_functionalities,app_categories,interaction_style, package_name) %>%
get_dupes()
df_ex_2 <- df %>% filter(!grepl('Y', ShouldBe_Cancelled))  %>%
filter(!package_name %in% package_should_NOT_removed)
df_ex_2 <-  df_ex_2 %>%
distinct(model_functionalities,app_categories,interaction_style,package_name,
interaction_type, .keep_all = TRUE)
df_2 <- df %>% filter(!grepl('Y', ShouldBe_Cancelled))  %>%
filter(package_name %in% package_should_NOT_removed) %>% select(colnames(df_ex_2))
df <- rbind(df_2, df_ex_2)
# now, after removing, these are the duplicate rows that should not be removed
df %>%  select(model_functionalities,app_categories,interaction_style, package_name) %>%
get_dupes()
# turns out "com.baidu.BaiduMap" has dynamic flashlight but in fact it is not; so I removed it in excel.
df %>% filter(interaction_style == "Flashlight" & interaction_type=="Dynamic")
# For Replace name of "Reticle" with "Object marker"
df$interaction_style <- replace(df$interaction_style, df$interaction_style=="Reticle",
"Object marker")
df %>% filter(interaction_style == "Flashlight" & interaction_type=="Dynamic")
# For Replace name of "Reticle" with "Object marker"
df$interaction_style <- replace(df$interaction_style, df$interaction_style=="Reticle",
"Object marker")
# For model_functionalities, Replace name of "Image labelling" with "Image classification"
df$model_functionalities <- replace(df$model_functionalities, df$model_functionalities=="Image labelling",
"Image classification")
df$model_functionalities <- replace(df$model_functionalities, df$model_functionalities=="Audio Classification",
"Audio classification")
df$model_functionalities <- replace(df$model_functionalities, df$model_functionalities=="Entity Extraction",
"Entity extraction")
# For Replace name of "Reticle" with "Object marker"
df$model_functionalities <- replace(df$model_functionalities, df$model_functionalities=="Barcode Scanning","Barcode scanning")
unique(df$model_functionalities)
## For Replace name of "<U+200E>Sports" with "Sports"
df$app_categories <- replace(df$app_categories, df$app_categories=="<U+200E>Sports","Sports")
df$interaction_type <- replace(df$interaction_type, df$interaction_type=="No interaction","No Interaction")
df
Sys.setlocale(category = "LC_ALL", locale = "chs") #setlocale in order to use Chinese
library(tidyverse)
library(janitor)
library(DT)
library(gtsummary)
library(plotly)
library(kableExtra)
# df <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel_Raw.csv",header = TRUE,as.is = TRUE, encoding = "UTF-8")%>% rename(model_functionalities=X.U.FEFF.model_functionalities)
df <- readxl::read_excel("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel.xlsx")
df %>% colnames()
df %>% unique(package_name)
unique(df$package_name)
df_1 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/All_in_one.csv")
df_2 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel.csv")
df_1
df_1 %>% janitor::tabyl(package_name)
df_1 %>% janitor::tabyl()
df_1 %>% janitor::tabyl()
df_1
df_1 %>% janitor::tabyl()
unique(df_1)
unique(df_1$package_name)
unique(df_2$package_name)
unique(df_1$package_name)
unique(df_2$package_name)
df_2 %>% left_join(df_1)
df_2 %>% dim
df_2
df_1
df_1 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/All_in_one.csv")
df_2 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel_Raw.csv")
unique(df_1$package_name)
unique(df_1$package_name)
df_2 %>% left_join(df_1)
df_1
df_2
df_2 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel_Raw.csv") %>% rename(model_functionalities=`锘縨odel_functionalities`)
df_2 %>% left_join(df_1)
df_1
df_1 %>% colnames()
col <- df_1 %>% colnames()
df_2 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel_Raw.csv") %>% rename(model_functionalities=`锘縨odel_functionalities`) %>% select(col )
df_2 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel_Raw.csv") %>% rename(model_functionalities=`锘縨odel_functionalities`) %>% select(all_of(col) )
unique(df_1$package_name)
df_2 %>% left_join(df_1)
df_2
df_1
df_2
unique(df_1)
unique(df_2)
unique(df_1) %>% left_join(unique(df_2))
unique(df_1)
unique(df_2)
unique(df_1) %>% anti_join(unique(df_2))
unique(df_1) %>% semi_join(unique(df_2))
unique(df_1) %>% anti_join(unique(df_2))
unique(df_1) %>% setdiff(unique(df_2))
unique(df_1) %>% right_join(unique(df_2))
a1 <- unique(df_1)
a2 <- unique(df_2)
a1$included_a1 <- TRUE
a2$included_a2 <- TRUE
merge(a1, a2, all=TRUE)
merge(a1, a2, all=TRUE) %>% view
merge(a1, a2, all=TRUE) %>% filter(included_a2 != TRUE) %>% view
merge(a1, a2, all=TRUE)
merge(a1, a2, all=TRUE) %>% filter(included_a1 != TRUE) %>% view
merge(a1, a2, all=TRUE)
merge(a1, a2, all=TRUE) %>% filter(included_a2 != TRUE)
merge(a1, a2, all=TRUE)
merge(a1, a2, all=TRUE) %>% filter(12 != TRUE) %>% view
merge(a1, a2, all=TRUE) %>% filter(10 != TRUE) %>% view
unique( merge(a1, a2, all=TRUE)$included_a2)
merge(a1, a2, all=TRUE) %>% filter(included_a2 == NA) %>% view
a1 <- unique(df_1)
a2 <- unique(df_2)
unique(df_1) %>% right_join(unique(df_2))
a1$included_a1 <- "TRUE"
a2$included_a2 <- "TRUE"
merge(a1, a2, all=TRUE) %>% filter(included_a2 == NA) %>% view
a1 <- unique(df_1)
a2 <- unique(df_2)
unique(df_1) %>% right_join(unique(df_2))
a1$included_a1 <- TRUE
a2$included_a2 <- TRUE
merge(a1, a2, all=TRUE) %>% filter(included_a2 == NA) %>% view
merge(a1, a2, all=TRUE)
merge(a1, a2, all=TRUE)%>% view
library(compareDF)
compareDF::compare_df(a1,a2)
df_1 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/All_in_one.csv")
df_2 <- read.csv("C:/Users/sjsa3/Desktop/Share_with_mac/year2_sem2/AI_Android/Spreadsheet/data_wrangling_on_device/check-2-ensure-on-device/All_in_one_afta_2nd_check_xcel_Raw.csv") %>% rename(model_functionalities=`锘縨odel_functionalities`) %>% select(all_of(col) )
a1 <- unique(df_1)
a2 <- unique(df_2)
unique(df_1) %>% right_join(unique(df_2))
library(compareDF)
compareDF::compare_df(a1,a2)
compareDF::compare_df(a1,a2, "row")
compareDF::compare_df(a1,a2, "row")
a1 <- unique(df_1)
a2 <- unique(df_2)
unique(df_1) %>% right_join(unique(df_2))
library(compareDF)
compareDF::compare_df(a1,a2, "row")
df_2
df_1
library(tidyverse)
#problem : now the same images have different tags, so there will be dubplicates when displaying to the gallery.
# example : ( PlantVillage has interaction styles of pop-up messages, instrction ) So there will be one image for instrction, and one for pop-up messages, when displaying to the gallery.
#Solution : all items with the same image links (which is the ID here) are seperated by common, instead of seperating them into difft rows.
library(tidyverse)
library(jsonlite)
library(janitor)
df <- read.csv("C:/Users/sjsa3/Documents/GitHub/Gallery_filterJS/examples/data/movie.csv")
comma_sep <- 		   df %>% group_by(year) %>%
summarise(
id             = paste(id),
outline        = paste(outline, collapse=","),
genre          = paste(genre, collapse=", "),
certificate    = paste(certificate, collapse=", "),
representation = paste(representation, collapse=", "),
pkg_name       = paste(pkg_name),
rating         = paste(rating),
runtime        = paste(runtime),
date           = paste(date),
director = paste(director),
actor          = paste(actor),
stars          = paste(stars),
name = paste(name)
) %>% distinct(year,.keep_all = TRUE)
comma_sep
allInOne_second_check <- c("plantvillage.nuru",
"com.ycc365closeli.aws",
"com.junruy.cgfyj",
"com.camerax.s20galaxy",
"com.bgc.bgc",
"faceapp.magikoly.exploreandhavefun",
"com.iart.camera.photo",
"com.snapgify",
"cn.fundview.agriculturemarket",
"com.google.android.apps.cultural",
"com.pictureme.photoeditor.picstudio",
"com.google.android.apps.photosgo",
"com.homesecurity.firstone",
"com.google.android.googlequicksearchbox",
"com.dailyhoroscope.facesecret",
"com.text.metal.effect",
"com.picstudio.photoeditorplus",
"machinelearning.tensorflow.speech",
"com.meitu.beautyplusme",
"com.xindihe.cgfyb",
"com.zivn.cloudbrush3",
"com.good.doc.scanner",
"com.live.videochat.india",
"com.newegg.app",
"com.dropcoo.aws",
"com.ultra.iphone12.camera.ios14.icamera",
"com.yrjf.qju.oqo",
"jp.ne.benesse.chui.akapen.camera",
"com.aresmob.transmaster",
"com.wAshMessenger_8787254",
"com.zsd.upi.xwa",
"com.goodcam.filter.aiface",
"com.convoy.driver",
"com.camhome.aws",
"com.magicvcam.super.selfiecam.camera",
"com.google.android.apps.translate",
"com.mobile.doc.scanner.pdfscanner.documentscanner.tool",
"com.live.veegopro.chat",
"com.fabbyhair.android",
"com.yitong.hrb.people.android",
"com.nick.android.nickjr",
"com.urbandroid.sleep",
"com.modiface.loreal.stylemyhair",
"com.cut.cutout.photo.background.editor",
"horoscope.secret.zodiac.palmistry.face",
"com.dengtacj.stock",
"com.iphone.camera.ios.icamera",
"ch.zhaw.facerecognition",
"cz.moneta.smartbanka",
"com.uccb.mobile",
"com.redmi8.mix.camera.for.xiaomi.mi10",
"com.aresmob.scantranslator",
"com.google.android.apps.photos.scanner",
"com.nowarder.translatorfotoscan",
"cutcut.cut.out.paste.background.remove.photo.cutout",
"com.paygo24.ibank",
"editor.free.ephoto.vn.ephoto",
"com.qrcode.scanner.barcode.reader.creator.free",
"daily.face.horoscope.zodiac",
"com.palmistry.horoscope.zodiacsign",
"com.wrste.jiduscanning",
"com.google.audio.hearing.visualization.accessibility.scribe",
"com.rnfdigital.mjbaker",
"com.verisec.mobile.frejaeid",
"com.geico.mobile",
"co.doscan.connect.pdf.gp",
"com.seefoodtechnologies.nothotdog",
"com.cloudbooking.cbmobile",
"com.aaa.ame.ind",
"co.theguru.dali",
"com.tyndale.filament",
"com.sixoversix.copyglass",
"com.steam.photoeditor",
"com.baidu.BaiduMap",
"io.anyline.examples.store",
"co.vero.app",
"com.siwalusoftware.dogscanner",
"com.ultra.miui12.camera.for.xiaomi",
"com.yondor.student",
"com.redbaby",
"com.huya.nimo",
"com.joytunes.simplypiano",
"com.camera.sketch.camera.pencil",
"com.camera12.iphone12",
"com.badoo.mobile",
"com.video.mini",
"ro.ing.mobile.banking.android.activity",
"com.fishbrain.app",
"com.bang.bangwithfriends",
"com.rnfdigital.eastNWest",
"com.futureme.palmreader",
"com.p1.mobile.putong",
"com.vyroai.AiBlurEditor",
"com.disney.datg.videoplatforms.android.watchdc",
"cn.jingling.motu.photowonder",
"com.unicredit",
"com.kaiqi.videoae",
"com.yumika.wastickr",
"com.baseapp.eyeem",
"com.fingershopping",
"app.uk.co.incase.benglasslaw",
"cn.com.hrcrb.mobilebank.per",
"com.tq.master",
"app.uk.co.incase.bott",
"com.cameras20.galaxys20camera",
"com.aihehuo.app",
"com.fenbi.android.leo",
"com.wegene.future",
"com.adam.surrounding_sounds_recognition",
"tv.mola.app",
"com.cam001.selfie",
"com.galaxys.camera4k",
"com.nhn.android.search",
"vn.ephoto.newyear.frame",
"com.draw.clash.drawit",
"com.birthday.cup.cake.effect",
"com.icomedias.hybridforms",
"com.trackyourcarbon.carbon",
"com.easilydo.mail",
"horoscope.zodiac.love.master",
"com.oneplus.camerax",
"com.familyfit.google.baduanjin",
"com.mecoo.chat",
"facetechstudio.future.me",
"https://github.com/tensorflow/examples/tree/master/lite/examples/object_detection/android",
"ai.fritz.heartbeat",
"com.dailyselfie.newlook.studio",
"com.ghost.sibyl",
"com.blakemore.finefoods",
"com.grammarly.android.keyboard",
"com.kaiqi.snapemoji",
"com.uzero.baimiaog",
"com.camera.galaxyx",
"machinelearning.tensorflow.classifier",
"com.eraserphoto.cutout.backgroundeditor",
"com.cimb.smart.prod",
"com.chinasoft.mall",
"com.secusccloud.aws",
"com.kwai.video")
df_gallery <-  read.csv("C:/Users/sjsa3/AppData/Local/Temp/MicrosoftEdgeDownloads/9b415135-511e-45cb-bda0-c3964af87ee9/convertcsv.csv")
df_gallery
df_gallery
df_gallery %>% filter(pkg_name %in% allInOne_second_check)
suyu_gallery <- c("com.bitcoin.mwallet",
"net.idt.um.android.bossrevapp",
"asia.coins.mobile",
"com.google.android.apps.village.boond",
"de.orrs.deliveries",
"com.ebay.mobile",
"com.face.aging.face.truth",
"com.lyrebirdstudio.facelab",
"camscanner.documentscanner.pdfreader",
"com.everimaging.photoeffectstudio",
"com.wf.funlab",
"com.charmy.cupist",
"com.hp.printercontrol",
"com.selfie.phone11.camera.ios13.icamera",
"com.ticktalk.imageconverter",
"jp.co.appfactory.birdun",
"com.etoolkit.lovecollage",
"com.myyearbook.m",
"mingle.android.mingle2",
"tv.mixch.android",
"com.mventus.ncell.activity",
"com.hawsoft.mobile.ocrtrans",
"com.appculus.photo.pdf.pics2pdf",
"com.zzkko",
"com.vnpay.bidv",
"com.superlive.liveapp",
"com.thinkdirty.thinkdirtyapp",
"com.trove",
"com.trulymadly.android.app",
"com.krungsri.uchoose",
"io.voiapp.voi",
"com.wemagineai.voila",
"com.yochat.freechat",
"com.cyberlink.youcammakeup",
"com.zoodel.kz",
"com.yantech.zoomerang",
"tw.com.quickscanner.invoice",
"com.clickworker.clickworkerapp")
df_gallery %>% filter(pkg_name %in% allInOne_second_check) %>% filter(pkg_name %in% suyu_gallery)
df_gallery %>% filter(pkg_name %in% allInOne_second_check)
df_filter <- df_gallery %>% filter(pkg_name %in% allInOne_second_check)
df_filter %>% filter(pkg_name %in% suyu_gallery)
suyu_gallery
df_filter
df_filter <- df_gallery %>% filter(pkg_name !%in% allInOne_second_check)
df_filter <- df_gallery %>% filter(!pkg_name %in% allInOne_second_check)
df_filter
df_filter %>% filter(pkg_name !%in% suyu_gallery)
df_filter %>% filter(!pkg_name %in% suyu_gallery)
df_filter <- df_gallery %>% filter(!pkg_name %in% allInOne_second_check)
df_filter %>% filter(pkg_name %in% suyu_gallery)
df_filter <- df_gallery %>% filter(!pkg_name %in% allInOne_second_check)
df_filter
df_filter %>% filter(!pkg_name %in% suyu_gallery)
suyu_gallery <- c("asia.coins.mobile",
"com.google.android.apps.village.boond",
"com.ebay.mobile",
"com.lyrebirdstudio.facelab",
"com.wf.funlab",
"com.hp.printercontrol",
"com.selfie.phone11.camera.ios13.icamera",
"com.hawsoft.mobile.ocrtrans",
"com.zzkko",
"com.thinkdirty.thinkdirtyapp",
"com.cyberlink.youcammakeup",
"tw.com.quickscanner.invoice")
df_filter %>% filter(!pkg_name %in% suyu_gallery)
df_filter %>% filter(!pkg_name %in% suyu_gallery) %>% unique(pkg_name)
df_filter <- df_filter %>% filter(!pkg_name %in% suyu_gallery)
unique(df_filter$pkg_name)
unique(df_filter$pkg_name) %>% dim
distinct(df_filter$pkg_name)
unique(df_filter$pkg_name)
unique(df_filter$pkg_name)
df_gallery %>% filter(pkg_name %in% unique(df_filter$pkg_name))
df_gallery %>% filter(pkg_name %in% unique(df_filter$pkg_name)) %>% write.csv("lostRowsFromGallery(SuyuData).csv")
df_gallery %>% filter(pkg_name %in% unique(df_filter$pkg_name)) %>% select(-rating,-runtime
,-date
,-director
,-actor, stars
)
df_gallery %>% filter(pkg_name %in% unique(df_filter$pkg_name)) %>% select(-rating,-runtime ,-date ,-director ,-actor, stars )%>%
write.csv("lostRowsFromGallery(SuyuData).csv")
df_gallery %>% filter(pkg_name %in% unique(df_filter$pkg_name)) %>% select(-rating,-runtime ,-date ,-director ,-actor, -stars )%>%
write.csv("lostRowsFromGallery(SuyuData).csv")
